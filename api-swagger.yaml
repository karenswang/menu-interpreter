---
openapi: 3.0.0
info:
  title: home-iot-api
  description: The API for the EatBacon IOT project
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/KARENSIQIWANG/menu-interpreter/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /user:
    post:
      tags:
      - User
      description: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: successfully registered user
  /user/{username}:
    get:
      tags:
      - User
      description: Get user by user name
      parameters:
      - name: username
        in: path
        description: get user info by username
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
    put:
      tags:
      - User
      summary: Update user info
      description: this can only be done by the logged in user.
      parameters:
      - name: username
        in: path
        description: update user info by username
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
        "404":
          description: User not found
  /user/logout:
    get:
      tags:
      - User
      summary: Logs out current logged in user session
      description: ""
      parameters: []
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - User
      description: log in a user
      parameters:
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successfully logged in user
        "400":
          description: Invalid username/password
  /user/preference:
    post:
      tags:
      - User
      summary: Submit dietary preferences
      description: |
        Enables the storage of user dietary preferences. These are crucial data for the analysis process.      responses: '200':
          description: successfully created preference record
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preferences'
      responses:
        "200":
          description: Preferences submitted successfully
  /user/preference/{username}:
    get:
      tags:
      - User
      summary: Retrieve dietary preferences
      description: |
        Needed to allow users to review or modify their dietary preferences
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User profile data
    put:
      tags:
      - User
      summary: Update dietary preferences
      description: |
        Ensures users can keep their dietary restrictions up-to-date, which is crucial for accurate analysis.
      parameters:
      - name: username
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User profile updated successfully
  /menu/upload:
    post:
      tags:
      - Menu
      summary: Upload a menu image
      description: |
        Allows users to upload images for text extraction and analysis.  This is the core functionality that enables the dietary analysis feature.
      responses:
        "200":
          description: Image uploaded and analysis in process
        "400":
          description: Invalid file format
  /menu/{menu_id}/analysis:
    get:
      tags:
      - Menu
      summary: Get menu analysis result
      description: |
        Retrieves the results of the dietary analysis against the menu.
      parameters:
      - name: menu_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Analysis data
        "404":
          description: Menu not found
  /restaurant:
    get:
      tags:
      - Restaurant
      summary: Search for restaurants
      description: |
        Provides the ability to search for restaurants based on restaurant names.
      responses:
        "200":
          description: List of restaurants
  /restaurant/recommendations:
    get:
      tags:
      - Restaurant
      summary: Get recommended restaurants
      description: |
        Based on user preference, find restaurants in the database that has based on user dietary preferences.  Adds a layer of personalization and predictive analysis to the user experience.
      responses:
        "200":
          description: List of recommended restaurants
  /restaurant/{restaurant_id}/menu:
    get:
      tags:
      - Restaurant
      summary: Get Restaurant Menu
      parameters:
      - name: restaurant_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: searchable_data
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Restaurant menu data
        "404":
          description: Restaurant not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        username:
          type: string
          example: bumblebee
        email:
          type: string
          example: hello@gmail.com
        password:
          type: string
          format: password
        preferences:
          $ref: '#/components/schemas/Preferences'
    Preferences:
      type: object
      properties:
        vegetarian:
          type: boolean
        vegan:
          type: boolean
        glutenFree:
          type: boolean
        allergens:
          type: array
          items:
            type: string
